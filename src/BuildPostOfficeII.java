import java.util.*;

/**
 * Created by lingjmeng on 1/29/18.
 */

// this solution will exceed mem limit, however got correct answer

/**
    Given a 2D grid, each cell is either a wall 2, an house 1 or empty 0 (the number zero, one, two), find a place to build a post office so that the sum of the distance from the post office to all the houses is smallest.

Return the smallest sum of distance. Return -1 if it is not possible.

 Notice
You cannot pass through wall and house, but can pass through empty.
You only build post office on an empty.
Have you met this question in a real interview? Yes
Example
Given a grid:

0 1 0 0 0
1 0 0 2 1
0 1 0 0 0
return 8, You can build at (1,1). (Placing a post office at (1,1), the distance that post office to all the house sum is smallest.)
     */
public class BuildPostOfficeII {

    int[] dx = {0, 0, 1, -1};
    int[] dy = {1, -1, 0, 0};
    /*
     * @param grid: a 2D grid
     * @return: An integer
     */
    public int shortestDistance(int[][] grid) {
        // write your code here

        // corner case
        if (grid == null || grid.length == 0 || grid[0].length == 0) return -1;

        List<Coordinate> list = new LinkedList<>();

        int row = grid.length;
        int col = grid[0].length;
        int houseCount = 0;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 0) {
                    list.add(new Coordinate(i, j));
                }
                if (grid[i][j] == 1) {
                    houseCount++;
                }
            }
        }

        // corner case
        if (list.size() == 0) return -1;

        int minPath = Integer.MAX_VALUE;
        for (Coordinate emptyNode : list) {
            int bfs = bfs(emptyNode, grid, houseCount);
            System.out.println(bfs);
            if (bfs != -1) {
                minPath = Math.min(minPath, bfs);
            }
        }
        if (minPath != Integer.MAX_VALUE) {
            return minPath;
        }
        return -1;
    }

    private int bfs(Coordinate node, int[][] grid, int houseCount) {

        Queue<Coordinate> queue = new LinkedList<>();
        queue.offer(node);
        int pathSum = 0;
        int step = 0;
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        int visitedHouseNum = 0;;
        while (!queue.isEmpty()) {
            step++;
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                Coordinate emptyNode = queue.poll();
                for (int dir = 0; dir < 4; dir++) {
                    Coordinate nextNode = new Coordinate(emptyNode.x + dx[dir], emptyNode.y + dy[dir]);
                    if (!validNode(nextNode, grid)) {
                        continue;
                    }
                    if (grid[nextNode.x][nextNode.y] == 1 && !visited[nextNode.x][nextNode.y]) {
                        visited[nextNode.x][nextNode.y] = true;
                        visitedHouseNum++;
                        pathSum += step;
                        if (houseCount == visitedHouseNum) {
                            return pathSum;
                        }
                    }
                    if (grid[nextNode.x][nextNode.y] == 0 && !visited[nextNode.x][nextNode.y]) {
                        queue.offer(nextNode);
                        visited[nextNode.x][nextNode.y] = true;
                    }
                }
            }
        }
        return -1;
    }

    private boolean validNode(Coordinate node, int[][] grid) {
        if (node.x >= 0 && node.x < grid.length && node.y >= 0 && node.y < grid[0].length) {
            return grid[node.x][node.y] == 0 || grid[node.x][node.y] == 1;
        }
        return false;
    }

    public static void main(String[] args) {
        BuildPostOfficeII bpo2 = new BuildPostOfficeII();
        //int[][] input = {{0,1,0,0,0},{1,0,0,2,1},{0,1,0,0,0}};
        int[][] input2 = {{0,1,0,0},{1,0,2,1},{0,1,0,0}};
        int[][] input3 = {{0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,2,0,0,0},{1,0,2,0,2,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,2,2,0,2,0,2,0,0,0,0,0,0,0,2,0},{0,0,0,1,0,0,0,0,0,2,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0},{0,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},{0,0,0,1,0,2,0,0,2,0,0,2,0,0,0,2,0,0,0,0,2,0,0,0,2,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,2,0,0,2},{0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,2,2,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,2},{0,0,0,1,0,2,0,2,0,0,0,2,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,2,0,2,0,0,0,0,0,2,0,0,2,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,2,0,0,0},{0,2,0,2,2,2,0,0,0,0,0,0,1,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0},{1,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,2,2,0,0,0,0,0,2,0,2,2,1,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,1,0,0,0,0,0,0,0,0,0,2,2,0,0,0,2,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0},{0,0,2,0,0,0,0,0,2,0,2,0,0,0,2,0,0,2,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,2,2,0,0,0,2,1,0,2,0,0,1,2,1,0,0,2,2,0,0,0,0,0},{2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,2,0,0,0,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,2,0,0,0,0,0,2,0,2,0,0,0,0,0,0,1,0,1,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0},{0,0,2,1,0,2,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,0,1,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,2,0,2,0,2,0,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,2,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,1,0,2,2,0,2,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0},{2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,2,0,0,2,0,2,0,0,0,0,0,0,0,0,2,0},{0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,2,0,0},{0,2,0,1,0,0,0,0,2,0,0,0,2,0,0,0,0,2,0,0,1,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,2,2,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,1,0,0,2,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,1,2,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2},{0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,1,0,2,0,0,0,0,2,0,2,0,2,0,0,0,2,0,2,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0},{2,0,2,2,0,0,0,0,2,0,0,0,0,2,0,2,0,0,2,1,0,2,0,0,0,0,0,2,2,2,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,2,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,2,0,0,0,0,2,0,1,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,2,0,0,0,0,0,0},{0,0,2,0,0,2,0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{2,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,2,0,0,0,0,0,2,0,0},{0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0},{0,0,2,0,0,1,0,0,2,0,2,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,2,0,2,0,0,2,0,0,0},{0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,2,0,0,0,0,0,2,0,0,0,2,2,0,0,2,0,0,0,2,0,0,2,0,0,0,2,0,2,1},{0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,2,0,0,0,2,0,0,1,0,0,0,0,2,0,0,0,0,2,0,0,0,2,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},{0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,2,0,0,0,2,0,0,0,0,2,0,0,2,0,2,0,2,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,0,0,0,0,0,0,0,1,0,0,0,0,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,2,0,0,0},{0,2,0,2,0,0,1,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,1,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0},{0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0},{2,0,0,2,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,0,2,2,0,0,0,0,0,0,0,0,2,0,0,2,2,0,0,0,1,2,0,0},{0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,0,0,0,0,0,1,0},{0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,2,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,2,0},{0,0,0,0,2,0,0,0,1,2,0,2,0,1,0,0,2,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,2,0,2,1,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,2,0,1,2,0},{0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0},{0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2,0,0,2,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,2,2,0,2,2,0,0,2,0,0,0,0,0},{0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0},{0,0,0,0,2,0,2,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,2,0,0,1,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0},{2,2,0,0,0,2,2,2,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,1,0,0,0,0,0,0,2,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,2,0,0,1,0,0,2,0,0,0,2,0,0,2,2,1,2,2,0,0,0,2,0,2,0,0,0,2,0,0,0,0,0,2,1,0,1,0,0,0}};
        System.out.println(bpo2.shortestDistance(input3));
    }
}

class Coordinate {
    public int x;
    public int y;
    public Coordinate(int x, int y) {
        this.x = x;
        this.y = y;
    }
}